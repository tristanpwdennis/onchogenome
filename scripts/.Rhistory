theme_minimal(base_size = 22) +
theme_minimal()
}
inferredrelplot <- plotinferredrel(rel)
plotinferredrel(rel)
rel %>% filter(., fracsites > 0.5) %>%
ggplot(aes(x=R1, y = R0, colour = relationship)) +
geom_point() +
theme_minimal(base_size = 22) +
theme_minimal() +
scale_colour_discrete(name  ="Inferred relationship", labels=c("Full-Sib", "Half-Sib", "Unrelated"))
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
align = 'vh',
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 1, rel_heights = c(1, .05))
plotr1r0 <- function(rel) {
#plot R1/R0
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=R0, colour = degree_bro)) +
geom_point() +
theme_minimal(base_size = 15) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
###########################
#function for plotting r1 and rKING robust kinship
plotr1king <- function(rel) {
#plot R1/King ROBUST KINSHIP
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=Kin, colour = degree_bro)) +
geom_point() +
theme_minimal(base_size = 15) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
r1r0 <- plotr1r0(rel)
r1king <- plotr1king(rel)
rel <- definetherelationship(rel)
inferredrel <- plotinferredrel(rel)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, 12)) +
theme(legend.position = "bottom")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
align = 'vh',
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 1, rel_heights = c(1, .05))
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, 12)) +
theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
align = 'vh',
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 1, rel_widths = c(1, .05))
plot_grid(prow, legend, rel_widths = c(1, .05))
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, 12)) +
theme(legend.position = "bottom")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
align = 'vh',
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 1, rel_heights = c(1, .05))
plot_grid(prow)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none")
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, 12)) +
theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, 2)) +
theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, 0.1)) +
theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, 0)) +
theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, -2)) +
theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.box.margin = margin(0, 0, 0, -5)) +
theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme()
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend)
plot_grid(prow, legend, rel_widths = c(3, .4))
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, rel_widths = c(5, .2))
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = 1,
nrow = 1
)
plot_grid(prow, legend, rel_widths = c(5, .2))
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, rel_widths = c(5, .2))
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
```{r plotr0r1, fig.height = 3, fig.width = 3, fig.align = "center", echo = FALSE}
r1r0 <- plotr1r0(rel)
r1king <- plotr1king(rel)
rel <- definetherelationship(rel)
inferredrel <- plotinferredrel(rel)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 + theme(legend.position = "right")
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 +
theme(legend.position = "right") +
theme(legend.box.margin = margin(0, 0, 0, 12))
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 +
theme(legend.position = "right") +
theme(legend.box.margin = margin(0, 0, 0, 13))
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
###########################
#function for plotting r1 and rKING robust kinship
plotr1king <- function(rel) {
#plot R1/King ROBUST KINSHIP
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=Kin, colour = degree_bro)) +
geom_point() +
theme_minimal(base_size = 15) +
theme(axis.text=element_text(size=12)) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
plotr1r0 <- function(rel) {
#plot R1/R0
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=R0, colour = degree_bro)) +
geom_point() +
theme_minimal(base_size = 15) +
theme(axis.text=element_text(size=12)) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
r1r0 <- plotr1r0(rel)
r1king <- plotr1king(rel)
rel <- definetherelationship(rel)
inferredrel <- plotinferredrel(rel)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 +
theme(legend.position = "right") +
theme(legend.box.margin = margin(0, 0, 0, 13))
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
plotr1r0 <- function(rel) {
#plot R1/R0
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=R0, colour = degree_bro)) +
geom_point() +
theme_minimal(base_size = 15) +
theme(axis.text=element_text(size=12)) +
theme(plot.margin = margin(6, 0, 6, 0)) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
###########################
#function for plotting r1 and rKING robust kinship
plotr1king <- function(rel) {
#plot R1/King ROBUST KINSHIP
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=Kin, colour = degree_bro)) +
geom_point() +
theme_minimal(base_size = 15) +
theme(axis.text=element_text(size=12)) +
theme(plot.margin = margin(6, 0, 6, 0)) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
r1r0 <- plotr1r0(rel)
r1king <- plotr1king(rel)
rel <- definetherelationship(rel)
inferredrel <- plotinferredrel(rel)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 +
theme(legend.position = "right") +
theme(legend.box.margin = margin(0, 0, 0, 13))
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
plotr1r0 <- function(rel) {
#plot R1/R0
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=R0, colour = degree_bro)) +
geom_point() +
theme_half_open(12) +
theme(axis.text=element_text(size=12)) +
theme(plot.margin = margin(6, 0, 6, 0)) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
###########################
#function for plotting r1 and rKING robust kinship
plotr1king <- function(rel) {
#plot R1/King ROBUST KINSHIP
filter(rel, fracsites > 0.5) %>%
ggplot(., aes(x=R1, y=Kin, colour = degree_bro)) +
geom_point() +
theme_half_open(12) +
theme(axis.text=element_text(size=12)) +
theme(plot.margin = margin(6, 0, 6, 0)) +
scale_colour_discrete(name  ="Known Degree", labels=c("Between Brood", "Within Brood"))
}
r1r0 <- plotr1r0(rel)
r1king <- plotr1king(rel)
rel <- definetherelationship(rel)
inferredrel <- plotinferredrel(rel)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 +
theme(legend.position = "right") +
theme(legend.box.margin = margin(0, 0, 0, 13))
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
# extract the legend from one of the plots
legend <- get_legend(
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 +
theme(legend.position = "right") +
theme(legend.justification = c(0,0.5))
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
# extract the legend from one of the plots
legend <- get_legend(
# create some space to the left of the legend
r1r0 +
theme(legend.position = "right") +
theme(legend.justification = c(0,0.5))
)
prow <- plot_grid(
r1r0 + theme(legend.position="none"),
r1king + theme(legend.position="none"),
labels = c("A", "B"),
hjust = -1,
nrow = 1
)
plot_grid(prow, legend, ncol = 2, rel_widths = c(1, .1))
plot_grid(prow, legend, ncol = 2, rel_widths = c(2, .1))
plot_grid(prow, legend, ncol = 2, rel_widths = c(2, 1))
plot_grid(prow, legend, ncol = 2, rel_widths = c(2, 0.7))
plot_grid(prow, legend, ncol = 2, rel_widths = c(2, 0.8))
plot_grid(prow, legend, ncol = 2, rel_widths = c(2, 0.9))
plot_grid(prow, legend, ncol = 2, rel_widths = c(2, 0.6))
plotinferredrel(rel)
###########################
#function for plotting r1 and and R0 with inferred rel coloured in
plotinferredrel <- function(rel) {
rel %>% filter(., fracsites > 0.5) %>%
ggplot(aes(x=R1, y = R0, colour = relationship)) +
geom_point() +
theme_half_open(12) +
scale_colour_discrete(name  ="Inferred relationship", labels=c("Full-Sib", "Half-Sib", "Unrelated"))
}
plotinferredrel(rel)
metadata
View(metadata)
metadata %>% filter(short_plate_name == 'WS_08_19_MF')
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000)
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000) %>%
geom_boxplot(data = .$coverage)
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000) %>%
geom_boxplot(aes(y=coverage))
geom_boxplot()
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000) %>%
ggplot(aes(y=coverage)) +
geom_boxplot()
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000) %>%
ggplot(aes(y=coverage)) +
geom_boxplot() +
geom_jitter()
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000) %>%
ggplot(aes(y=coverage)) +
geom_jitter()
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000) %>%
ggplot(aes(y=coverage)) +
theme_half_open(12) +
geom_boxplot()
metadata %>%
filter(short_plate_name == 'WS_08_19_MF') %>%
mutate(coverage = (number.of.mapped.reads*75) / 97000000) %>%
ggplot(aes(y=coverage)) +
theme_half_open(12) +
geom_boxplot() +
geom_jitter()
